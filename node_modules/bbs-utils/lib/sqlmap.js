/**
 * create sql code
 */
var sqlMap = {
    /******** 使用率比较高的语句 ********/
    hasUser: function () {
        return "SELECT username FROM user WHERE username=? LIMIT 1";
    },
    login: function () {
        return "SELECT * FROM user WHERE deleteFlag=0 AND username=? AND password=?";
    },
    scoreRank: function (gameName) {
        let sql = "SELECT s.userid,s." + gameName + " FROM score s ";
        sql += "WHERE("
        sql += "SELECT count(*) FROM score ss "
        sql += "WHERE ss." + gameName + " > s." + gameName
        sql += ") < 5";
        sql += " ORDER BY " + gameName + " DESC"
        return sql;
    },
    /******** 条件语句 ********/
    /**
     * 添加 where in 条件
     * @param {String} sql 
     * @param {String} condition
     * @param {int} conditionsNumber 
     */ 
    whereIn: function (sql, condition, conditionsNumber) {
        if (condition && conditionsNumber > 0) {
            if (sql.indexOf("WHERE") !== -1 && sql.indexOf("where") !== -1) {
                sql += " AND ";
            } else {
                sql += " WHERE ";
            }
            sql += condition + " IN  (";
            for (let i = 0; i < conditionsNumber; i++) {
                sql += "?,"
            }
            return sql.substring(0, sql.length - 1) + ")";
        } else {
            throw new Error("conditionsNumber must > 0");
        }
    },
    /**
     * 添加 where and 条件
     * @param {String} sql 
     * @param {Array} conditions 
     * @param {String} relationSymbol = | > | < | <> |like 
     */
    whereAnd: function (sql, conditions, relationSymbol) {
        if (conditions && conditions.length > 0) {
            if (sql.indexOf("WHERE") == -1 && sql.indexOf("where") == -1) {
                sql += " WHERE 1=1";
            }
            if (relationSymbol == "like" || relationSymbol == "LIKE") {
                relationSymbol = " LIKE ?";
            } else {
                relationSymbol += "?";
            }
            for (let i = 0; i < conditions.length; i++) {
                let condition = conditions[i];
                sql += " AND " + condition + relationSymbol;
            }
            return sql;
        } else {
            throw new Error("conditions.length must > 0");
        }
    },
    /**
     * 添加 where or 条件
     * @param {String} sql
     * @param {Array} conditions
     * @param {String} relationSymbol = | > | < | <> |like
     */
    whereOr: function (sql, conditions, relationSymbol) {
        if (conditions && conditions.length > 0) {
            if (sql.indexOf("WHERE") == -1 && sql.indexOf("where") == -1) {
                sql += " WHERE 1=1";
            }
            if (relationSymbol == "like" || relationSymbol == "LIKE") {
                relationSymbol = " LIKE ?";
            } else {
                relationSymbol += "?";
            }
            for (let i = 0; i < conditions.length; i++) {
                let condition = conditions[i];
                sql += " OR " + condition + relationSymbol;
            }
            return sql;
        } else {
            throw new Error("conditions.length must > 0");
        }
    },
    /**
     * 获取数量
     * @param {String} table 
     */
    count: function (table) {
        let sql = "SELECT count(*) AS number FROM " + table;
        return sql;
    },
    /**
     * 条件 数量限制
     * @param {String} sql sql code
     */
    limit: function (sql) {
        sql += " LIMIT ?,?";
        return sql;
    },
    /**
     * 条件 数量限制
     * @param {String} sql sql code
     */
    limitNumber: function (number) {
        sql += " LIMIT " + number;
        return sql;
    },
    filterDeleted: function (sql) {
        return this.whereAnd(sql, ["deleteFlag"], "=");
    },
    /******** 增删改查语句 ********/
    /**
     * 增
     * @param {string} table sql table name
     * @param {Array} columns array of insert columns
     */
    insert: function (table, columns) {
        let sql = "INSERT INTO";
        sql += " " + table + " (";
        for (let i = 0; i < columns.length; i++) {
            let column = columns[i];
            sql += column + ",";
        }
        sql = sql.substring(0, sql.length - 1) + ")";
        sql += " VALUES (";
        for (let i = 0; i < columns.length; i++) {
            sql += "?,";
        }
        sql = sql.substring(0, sql.length - 1) + ")";
        return sql;
    },
    /** 
     * 删
     * @param {string} table sql table name
     * @param {Array} idList array of restore id
     */
    reldelete: function (table, idList) {
        let sql = "DELETE FROM " + table;
        sql = this.whereIn(sql, ["id"], idList.length);
        return sql;
    },
    /**
     * 改
     * @param {string} table sql table name
     * @param {Array} columns array of update columns
     */
    update: function (table, columns) {
        if (columns && columns.length > 0) {
            let sql = "UPDATE " + table + " SET ";
            for (let i = 0; i < columns.length; i++) {
                let column = columns[i];
                sql += column + "=?,";
            }
            return sql.substring(0, sql.length - 1);;
        } else {
            throw new Error("conditions.length must bigger than 0");
        }
    },
    /**
     * 逻辑删除/恢复
     * @param {string} table sql table name
     * @param {Array} idList array of delete id
     */
    updateStatus: function (table, idList) {
        let sql = this.update(table, ["deleteFlag"]);
        sql = this.whereIn(sql, ["id"], idList.length);
        return sql;
    },
    /**
     * 查
     * @param {string} table sql table name
     * @param {Array} columns array of insert columns
     * @param {Array} columnsName array of field's another name
     */
    select: function (table, columns, columnsName) {
        let anotherNames = columnsName || [];
        let sql = "SELECT ";
        for (let i = 0; i < columns.length; i++) {
            let column = columns[i];
            if (i < anotherNames.length) {
                column += " AS " + anotherNames[i];
            }
            sql += column + ",";
        }
        sql = sql.substring(0, sql.length - 1);
        sql += " FROM " + table;
        return sql;
    },
    simpleSelect: function(table) {
        let sql = "SELECT * FROM " + table;
        return sql;
    },
    /**
     * sql查询所有字段语句, conditions条件可选
     * @param {string} table sql table name
     * @param {Array} conditions array of fliter condition columns
     * @param {Boolean} showDeleted  select deleted member
     */
    selectAllField: function (table, conditions, showDeleted) {
        let sql = this.select(table, ["*"], []);

        if (typeof showDeleted !== "undefined" && showDeleted) {
            sql = this.filterDeleted(sql, table);
        }
        return sql;
    },
    /**
     * sql查询所有字段语句, conditions条件可选
     * @param {string} table sql table name
     * @param {Array} conditions array of fliter condition columns
     * @param {Boolean} showDeleted  select deleted member
     */
    selectMatch: function (table, columns, showDeleted) {
        let sql = this.select(table, columns, []);
        sql = this.whereAnd(sql, columns, "=");
        if (typeof showDeleted !== "undefined" && showDeleted) {
            sql = this.filterDeleted(sql, table);
        }
        return sql;
    },
    /**
     * sql 常规查询语句, 增加数量限制
     * @param {string} table sql table name
     * @param {Array} columns array of insert columns
     * @param {Boolean} showDeleted   select deleted member
     */
    selectLimit: function (table, columns, showDeleted) {
        let sql = this.select(table, columns, []);
        if (typeof showDeleted !== "undefined" && showDeleted) {
            sql = this.filterDeleted(sql, table);
        }
        sql = this.limit(sql);
        return (sql);
    },
    /**
     * 
     * @param {String} sql 
     * @param {String} table1
     * @param {String} joinType
     * @param {String} table2
     * @param {Array} table1Columns
     * @param {Array} table2Columns
     */
    joinTable: function (sql, table1, joinType, table2, table1Columns, table2Columns) {
        sql += " " + joinType + " JOIN " + table2;
        sql += " ON ( 1=1 "
        for (let i = 0; i < table1Columns.length; i++) {
            sql += " AND " + table1 + "." + table1Columns[i];
            sql += "=" + table2 + "." + table2Columns[i];
        }
        return sql + ")";
    }
};

module.exports = sqlMap;